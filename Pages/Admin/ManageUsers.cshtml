@page
@model LostAndFoundWebApp.Pages.Admin.ManageUsersModel
@{
	ViewData["Title"] = "用户管理";
}

<h1>用户管理</h1>
<form method="post">
    @Html.AntiForgeryToken()
</form>
<table class="table">
	<thead>
		<tr>
			<th>用户ID</th>
			<th>邮箱</th>
			<th>用户名</th>
			<th>角色</th>
			<th>状态</th>
			<th>操作</th>
		</tr>
	</thead>
	<tbody id="userTableBody">
		@foreach (var user in Model.Users)
		{
				<tr id="userRow-@user.UserId">
					<td>@user.UserId</td>
					<td>@user.Email</td>
					<td>@user.Name</td>
					<td>@user.Role</td>
					<td id="userStatus-@user.UserId">@((user.IsValid == true) ? "有效" : "无效")</td>
					<td>
						<button class="btn btn-sm btn-primary toggle-status-btn" data-user-id="@user.UserId">
						@((user.IsValid == true) ? "禁用" : "启用")
						</button>
					</td>
				</tr>
		}
	</tbody>
</table>

@section Scripts {
        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const buttons = document.querySelectorAll('.toggle-status-btn');
                buttons.forEach(button => {
                    button.addEventListener('click', async (e) => {
                        const userId = e.target.getAttribute('data-user-id');
                        const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');

                        if (!tokenElement) {
                            console.error('防伪令牌未找到，请确保页面包含 @Html.AntiForgeryToken()。');
                            alert('请求失败：防伪令牌未找到。');
                            return;
                        }

                        const token = tokenElement.value;

                        try {
                            const response = await fetch(`/Admin/ManageUsers?handler=Toggle`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': token
                                },
                                body: JSON.stringify({ userId: parseInt(userId) }) // 确保 userId 是整数
                            });

                            if (response.ok) {
                                const result = await response.json();
                                const statusCell = e.target.closest('tr').querySelector('td:nth-child(5)');
                                const button = e.target;

                                // 更新状态和按钮文本
                                statusCell.textContent = result.isValid ? "有效" : "无效";
                                button.textContent = result.isValid ? "禁用" : "启用";
                            } else {
                                alert('更新失败，请稍后重试。');
                            }
                        } catch (error) {
                            console.error('请求失败:', error);
                            alert('请求失败，请检查网络连接。');
                        }
                    });
                });
            });
        </script>
}
